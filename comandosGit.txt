git init --> inicia un repositorio git en local si no lo enlazamos

git clone http://...../ --> para clonar un repositorio (si estas en remoto, 
    tienes que crearlo en el repositorio remoto directamente)
    Si hacemos el repositorio desde local para llevarlo al remoto, se hace el git clone directamente

git status --> te dice como esta tu repositorio en el momento

en este ejemplo:

    https://github.com/Charly30000/pruebaGit.git
    sino
    https://github.com/Charly30000/pruebaGit

git add nombreArchivo --> para añadir un archivo a sincronizar con git
    - Se podria hacer : git add *.html
    - git add --all que es lo mismo que poner git add -A --> con este se almacena todo, incluso las subcarpetas

git rm --cached noimportante.txt --> para hacer que ese fichero lo ignore (para eliminarlo)

git reset noimportante.txt --> igual que el git rm

Hay un fichero llamado .gitignore
A este fichero le añadimos el nombre de los archivos o de las carpetas para solo tener que modificar
ese fichero, y asi ignore todo lo que hay puesto ahi. ej:
    noimportante.txt
    assets/foto
    *.html
    vendor/
    config.ini

git commit -m --> Hace una instantanea, y ademas es obligatorio añadirle un mensaje descriptivo del commit
    git commit -m "Soy un mensaje"

git commit -am "mensaje" --> es un git add + git commit

git commit --ammend -m "mensaje"--> sirve para enmendar algo que te faltaba en el ultimo commit

git config --global user.name "charly30000" -> para configurar el nombre del usuario

git config --global user.email "andresbuzon@hotmail.com"

git config --list --> ves todos los parametros de configuracion

git log --> te dice el diario de commits

nuestro repositorio remoto se va a llamar siempre "origin"

git remote add origin https://github.com/Charly30000/pruebaGit.git --> Asociar el repositorio local al remoto

para subirlo es:

git push origin master (-u) --> subes el archivo, con -u, lo guarda automaticamente y solo necesitarias usuario 
    git push, sin tener que poner nada más

git pull --> obtienes los cambios que has hecho (por si lo has hecho con otra persona o en otro ordenador)

git branch ramaNueva --> crea una rama nueva en el punto en el que estes

git checkout ramaNueva --> para cambiarte a la rama nueva que has creado

git merge ramaNueva --> te colocas primero en la rama master, y luego pones el comando con el nombre de la rama

git checkout c5fa2d5....(como se llame ese commit) --> te permite viajar atras en el tiempo

git checkout - --> Te permite volver al punto normal en el tiempo

git ckeckout -b prueba --> Te crea y te mueve de rama al instante

Para hacerlo con mas gente:
    - Crea el repo el github
    - El dueño hace un clone 
    - Editar
    - push
    -------
    Los compañeros:
    - editar algo sin chafarse
    - hacen un push
    - El dueño acepta el pull request

git pull --> añade y busca etiquetas.
    Las etiquetas pueden ser cualquier texto, pero habitualmente son marcas de version
    ej: "v1.1"

Resolucion de conflictos en merge. La situacion habitual ->
    - Crear un proyecto con ficheros ->
        ej: uno.txt dos.txt
    - Hacemos un git add y un commit en master
    - Creamos una rama
    - Modificamos el mismo fichero en ambas ramas
    - Intentamos mezclar la rama nueva en master
        - resolver el conflicto manualmente
        - añadimos el fichero al stage
        - hacemos un commit

git diff --> muestra las diferencias